
(define empty?
  (lambda (lst)
     (eq? lst '()))
 )


(define append 
  (lambda(lst1 lst2)
      (if (empty? lst1)
                                   lst2
                                   (cons (car lst1) (append (cdr lst1) lst2)))
                               ))
  

(define reverse 
  (lambda (lst)
       (if (empty? lst) lst (append (reverse(cdr lst)) (list (car lst))
  )
)))

(define duplicate-item
  (lambda (num amount)
    (if (= amount 0) '()
        (cons num (duplicate-item num (- amount 1))))
    
    )
  )


(define duplicate-items
   (lambda (lst dup-count)
    (if (empty? lst) '()
(append (duplicate-item (car lst) (car dup-count))
        (duplicate-items (cdr lst)
                         (append (cdr dup-count) (list (car dup-count)))))
        )
   )
)

(define remove-duplicates
  (lambda (num-to-remove lst)
    (if (empty? lst) '()
        (if (= (car lst) num-to-remove) (remove-duplicates num-to-remove (cdr lst))
            (append (list(car lst)) (remove-duplicates num-to-remove (cdr lst)))
            )
        )
    )
  )

(define payment
  (lambda (n coins-lst)
      (if (= n 0) 1
          (if (< n 0) 0
              (if (empty? coins-lst) 0
              (+ (payment n (remove-duplicates (car coins-lst) (cdr coins-lst)))
                (payment (- n (car coins-lst)) (cdr coins-lst))
              )))
              
          )
  )
)


(define compose-n
  (lambda( f n)
     (if (= n 0) (lambda (x) x)
         (lambda (x) (f ((compose-n f (- n 1)) x)))
         )
  )
)
